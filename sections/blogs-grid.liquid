<style>
  .tag-filter-container {
    margin-bottom: 20px;
  }
  #tag-filter-buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    margin-bottom: 16px;
  }
  .filter-btn {
    padding: 8px 16px;
    border: 2px solid #e2e8f0;
    background: #fff;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
    transition: all 0.2s ease;
  }
  .filter-btn:hover {
    border-color: #3b82f6;
    background: #f8fafc;
  }
  .filter-btn.active {
    background: #3b82f6;
    color: #fff;
    border-color: #3b82f6;
  }
  .article-card {
    background: #fff;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    display: block;
    text-decoration: none;
    color: inherit;
  }
  .article-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15);
  }
  .article-image {
    width: 100%;
    height: 200px;
    object-fit: cover;
    background: #f3f4f6;
  }
  .article-card.as-featured .article-image {
    height: 300px;
  }
  .article-content {
    padding: 16px;
  }
  .article-title {
    font-size: 18px;
    font-weight: 600;
    margin-bottom: 8px;
    line-height: 1.3;
  }
  .article-card.as-featured .article-title {
    font-size: 24px;
  }
  .article-tags {
    font-size: 14px;
    color: #6b7280;
  }
  #pagination {
    display: flex;
    gap: 8px;
    margin-top: 20px;
  }
  #pagination a {
    padding: 8px 12px;
    border: 1px solid #d1d5db;
    text-decoration: none;
    border-radius: 4px;
    transition: all 0.2s ease;
  }
  #pagination a:hover {
    background: #f3f4f6;
  }
  @media (min-width: 768px) {
    #top-grid .as-featured {
      grid-column: 1;
      grid-row: span 3;
    }
    #top-grid .as-right {
      grid-column: 2;
    }
    .article-card.as-featured .article-image {
      height: 419px;
    }
    .article-card.as-right {
      display: flex;
      flex-direction: row;
      gap: 20px;
      align-items: stretch;
      height: 200px;
      min-width: 0;
    }
    .article-card.as-right .article-image {
      width: 55.9%;
      height: 100%;
      object-fit: cover;
      border-radius: 8px 0 0 8px;
      min-width: 0;
    }
    .article-card.as-right .article-content {
      width: 44.1%;
      padding: 24px 16px;
      display: flex;
      flex-direction: column;
      justify-content: center;
      min-width: 0;
    }
  }
</style>

<section id="{{ section.id }}">
  {%- assign articles_per_page = 7 -%}

  <div class="tag-filter-container">
    <div id="tag-filter-buttons">
      <button class="filter-btn active" data-tag="">All</button>
      {%- assign all_tags = '' -%}
      {%- for article in blog.articles -%}
        {%- for tag in article.tags -%}
          {%- assign tag_lc = tag | downcase -%}
          {%- unless all_tags contains tag_lc -%}
            <button class="filter-btn" data-tag="{{ tag_lc | escape }}">{{ tag }}</button>
            {%- assign all_tags = all_tags | append: ',' | append: tag_lc -%}
          {%- endunless -%}
        {%- endfor -%}
      {%- endfor -%}
    </div>
  </div>

  <ul id="article-source" style="display:none">
    {%- for article in blog.articles -%}
      <li
        class="article-item"
        data-tags="{{ article.tags | join: ',' | downcase }}"
        data-url="{{ article.url }}"
        data-title="{{ article.title | escape }}"
        data-image="{{ article.image | img_url: '600x400' }}"
        data-tags-display="{%- for tag in article.tags -%}{{ tag }}{%- unless forloop.last %}, {% endunless -%}{%- endfor -%}"
      ></li>
    {%- endfor -%}
  </ul>

  <div class="space-y-4">
    <ul id="top-grid" class="grid gap-4 md:grid-cols-2"></ul>
    <ul id="bottom-grid" class="grid gap-4 md:grid-cols-3"></ul>
  </div>

  <div id="pagination"></div>
  <div id="no-articles" style="display:none"><p>No articles found for the selected filter.</p></div>
</section>

<script>
  (() => {
    const perPage = {{ articles_per_page }};
    const allItems = Array.from(document.querySelectorAll('#article-source .article-item'));
    const pagination = document.getElementById('pagination');
    const filterButtons = document.querySelectorAll('.filter-btn');
    const noArticlesMsg = document.getElementById('no-articles');
    const topGrid = document.getElementById('top-grid');
    const bottomGrid = document.getElementById('bottom-grid');

    let filteredItems = [...allItems];
    let currentPage = 1;
    let totalPages = 1;

    const clearGrids = () => { topGrid.innerHTML = ''; bottomGrid.innerHTML = ''; };

    const createArticleCard = (item, index) => {
      const card = document.createElement('a');
      card.href = item.dataset.url;
      card.className = 'article-card';

      if (index === 0) card.classList.add('as-featured');
      else if (index >= 1 && index <= 3) card.classList.add('as-right');

      const imageHtml = item.dataset.image && item.dataset.image !== ''
        ? `<img src="${item.dataset.image}" alt="${item.dataset.title}" class="article-image">`
        : `<div class="article-image"></div>`;

      const tagsHtml = item.dataset.tagsDisplay
        ? `<div class="article-tags">${item.dataset.tagsDisplay}</div>`
        : '';

      card.innerHTML = `
        ${imageHtml}
        <div class="article-content">
          <h3 class="article-title">${item.dataset.title}</h3>
          ${tagsHtml}
        </div>
      `;

      return card;
    };

    const reorderForLayout = (list) => {
      clearGrids();
      list.forEach((item, i) => {
        const card = createArticleCard(item, i);
        if (i === 0) { topGrid.appendChild(card); }
        else if (i >= 1 && i <= 3) { topGrid.appendChild(card); }
        else if (i >= 4 && i <= 6) { bottomGrid.appendChild(card); }
      });
    };

    const addPageLink = (text, page, active) => {
      const a = document.createElement('a');
      a.href = '#';
      a.textContent = text;
      if (active) a.style.fontWeight = 'bold';
      a.addEventListener('click', (e) => { e.preventDefault(); showPage(page); });
      pagination.appendChild(a);
    };

    const renderPagination = () => {
      pagination.innerHTML = '';
      totalPages = Math.ceil(filteredItems.length / perPage) || 1;
      if (totalPages > 1) {
        if (currentPage > 1) addPageLink('Previous', currentPage - 1, false);
        for (let i = 1; i <= totalPages; i++) addPageLink(String(i), i, i === currentPage);
        if (currentPage < totalPages) addPageLink('Next', currentPage + 1, false);
      }
    };

    const showPage = (page) => {
      currentPage = Math.min(Math.max(1, page), totalPages);
      const start = (currentPage - 1) * perPage;
      const pageItems = filteredItems.slice(start, start + perPage);
      reorderForLayout(pageItems);
      renderPagination();
    };

    const filterArticles = (tag) => {
      filteredItems = tag
        ? allItems.filter((el) => el.dataset.tags.split(',').map(t => t.trim()).includes(tag))
        : [...allItems];

      if (!filteredItems.length) {
        clearGrids();
        pagination.innerHTML = '';
        noArticlesMsg.style.display = 'block';
        return;
      }

      noArticlesMsg.style.display = 'none';
      showPage(1);
    };

    const updateActiveButton = (btn) => {
      filterButtons.forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
    };

    filterButtons.forEach((btn) => {
      btn.addEventListener('click', (e) => {
        e.preventDefault();
        updateActiveButton(btn);
        const tag = btn.dataset.tag.toLowerCase().trim();
        filterArticles(tag);
      });
    });

    filterArticles('');
  })();
</script>

{% schema %}
{
  "name": "Simple Blog List",
  "settings": [],
  "presets": [{ "name": "Simple Blog List" }]
}
{% endschema %}
