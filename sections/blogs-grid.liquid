<style>
  .tag-filter-container {
    margin-bottom: 20px;
    margin: 0 auto;
    max-width: 1216px;
    position: relative; /* Add this */
  }
  .arrow-icon {
    display: none;
  }

  .tag-filter-container:after {
    content: '';
    position: absolute;
    right: 14px;
    top: 50%;
    transform: translateY(-50%);
    width: 24px;
    height: 24px;
    pointer-events: none;
    background-image: url("data:image/svg+xml,%3Csvg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M6 9L12 15L18 9' stroke='%23292524' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'/%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: center;
  }

  #tag-filter-select {
    width: 100%;
    padding: 12px 14px;
    border: 2px solid #ced6d3;
    background: #fff;
    color: #292524;
    border-radius: 8px;
    font-size: 16px;
    line-height: 1.5;
    font-weight: 700;
    font-family: Nunito, sans-serif;
    cursor: pointer;
    display: block;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    padding-right: 40px;
  }
  #tag-filter-select:focus,
  #tag-filter-select:active {
    border-color: #ea5167;

    outline: none;
  }

  #tag-filter-select::-ms-expand {
    display: none;
  }

  /* Desktop buttons */
  #tag-filter-buttons {
    display: none;
    flex-wrap: wrap;
    gap: 45px;
    border-bottom: 1px solid #ced6d3;
  }

  /* Show buttons on desktop, hide select */
  @media (min-width: 768px) {
    .tag-filter-container {
      margin-bottom: 45px;
      padding: 0px;
    }
    @media (min-width: 768px) {
      .tag-filter-container:after {
        display: none;
      }
    }
    #tag-filter-select {
      display: none;
    }
    #tag-filter-buttons {
      display: flex;
    }
  }

  .filter-btn {
    padding-bottom: 17px;
    background: #fff;
    color: #8f8f8f;
    cursor: pointer;
    font-family: Nunito, sans-serif;
    font-size: 20px;
    font-weight: 700;
    line-height: 1.5;
    border-bottom: 2px solid transparent;
    transition: color 0.2s ease, border-color 0.2s ease;
    position: relative;
  }
  .filter-btn:hover {
    color: #292524;
  }
  .filter-btn:hover::before {
    transform: scaleX(1);
  }

  .filter-btn::before {
    content: '';
    position: absolute;
    left: 0;
    bottom: -2px;
    height: 5px;
    width: 100%;
    background: #ea5167;
    border-radius: 2px;
    transform: scaleX(0);
    transform-origin: left;
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 1;
    pointer-events: none;
  }
  .filter-btn.active {
    color: #292524;
  }

  .filter-btn.active::before {
    transform: scaleX(1);
  }
  #top-grid,
  #bottom-grid {
    margin-inline-start: 0 !important;
  }
  .article-card {
    background: #fff;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    display: block;
    text-decoration: none;
    color: inherit;
  }
  .article-date {
    font-family: Nunito, sans-serif;
    font-weight: 700;
    font-size: 14px;
    line-height: 1.42;
    color: #44403c;
    margin-bottom: 8px;
  }
  .article-image {
    width: 100%;
    height: 240px;
    object-fit: cover;
    background: #f3f4f6;
    border-radius: 24px;
  }
  .article-content {
    margin-top: 20px;
  }

  .article-title {
    font-size: 20px;
    font-weight: 500;
    margin-bottom: 8px;
    line-height: 1.4;
    color: #292524;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    -webkit-line-clamp: 2;
    max-height: 2.6em;
  }

  .article-excerpt {
    font-family: Nunito, sans-serif;
    font-weight: 600;
    font-size: 16px;
    line-height: 1.5;
    color: #44403c;
    margin-bottom: 24px;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    -webkit-line-clamp: 3;
    max-height: 4.5em;
  }
  .article-card.as-right .article-excerpt {
    -webkit-line-clamp: 2;
    max-height: 3em;
  }

  .tag-badge {
    display: inline-block;
    background: #fbeced;
    color: #ea5167;
    border-radius: 999px;
    border: 1px solid #ea5167;
    padding: 2px 10px;
    margin-right: 8px;
    margin-bottom: 2px;
    font-size: 14px;
    font-family: Nunito, sans-serif;
    font-weight: 700;
    line-height: 1.42;
  }
  .tag-nutrition {
    background: #e4eaf6;
    color: #8aa5d9;
    border-color: #8aa5d9;
  }

  .tag-health-tips {
    background: #fdf4e9;
    color: #deb88a;
    border-color: #deb88a;
  }

  .tag-research {
    background: #fdf4e9;
    color: #deb88a;
    border-color: #deb88a;
  }

  .tag-sport {
    background: #fbeced;
    color: #ea5167;
    border-color: #ea5167;
  }

  .blogs-grid {
    padding-top: 70px;
    padding-bottom: 90px;
  }
  @media (min-width: 768px) {
    .article-card.as-featured .article-image {
      height: 300px;
    }
    .blogs-grid {
      padding-top: 110px;
      padding-bottom: 102px;
    }
    #top-grid .as-featured {
      grid-column: 1;
      grid-row: span 3;
    }
    #top-grid .as-right {
      grid-column: 2;
    }
    .article-card.as-featured .article-image {
      height: 419px;
    }

    .article-title,
    .article-card.as-featured .article-title {
      font-size: 24px;
    }
    .article-card.as-right .article-title {
      font-size: 18px;
    }
    .arrow-icon {
      display: block;
    }
    .article-card.as-right .arrow-icon {
      display: none;
    }

    .article-card.as-featured .article-content {
      margin-top: 25px;
    }
    .article-card.as-right .article-content {
      margin-top: 0px;
    }
    .article-card.as-right {
      display: flex;
      flex-direction: row;
      gap: 20px;
      align-items: stretch;
      height: 200px;
      min-width: 0;
    }
    .article-card.as-right .article-image {
      width: 55.9%;
      height: 100%;
      object-fit: cover;
      border-radius: 8px 0 0 8px;
      min-width: 0;
    }
    .article-card.as-right .article-content {
      width: 44.1%;
      display: flex;
      flex-direction: column;
      min-width: 0;
    }
  }

  .article-title-row {
    display: flex;
    align-items: start;
    justify-content: space-between;
  }
  .article-title-arrow {
    display: none;
    flex-shrink: 0;
    margin-left: 8px;
  }
  @media (min-width: 768px) {
    .article-title-arrow {
      display: inline-block;
    }
  }
  #pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 2px;
  }

  .pagination-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    min-width: 40px;
    height: 40px;
    border-radius: 50%;
    border: none;
    background: transparent;
    color: #475467;
    font-family: Nunito, sans-serif;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.2s ease, color 0.2s ease;
  }

  .pagination-btn:hover {
    background-color: #fdf4e9;
  }

  .pagination-btn.active {
    background-color: #fdf4e9;
    color: #182230;
  }

  .pagination-btn.disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .pagination-nav {
    display: flex;
    align-items: center;
    justify-content: center;
    min-width: 56px;
    height: 56px;
    border-radius: 50%;
    background: #fdf4e9;
    cursor: pointer;
  }

  .pagination-nav:hover:not(.disabled) {
    background-color: #f9f1e6;
  }

  .pagination-nav.disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .page-numbers {
    display: none;
  }

  .pagination-ellipsis {
    display: none;
    color: #44403c;
    font-weight: 700;
  }

  .mobile-page-indicator {
    display: flex;
    align-items: center;
    justify-content: center;
    color: #475467;
    font-family: Nunito, sans-serif;
    font-size: 14px;
    font-weight: 600;
    padding: 0 25px;
  }

  @media (min-width: 768px) {
    .page-numbers,
    .pagination-ellipsis {
      display: flex;
      border-radius: 8px;
    }
    .mobile-page-indicator {
      display: none;
    }
    .pagination-nav:first-child {
      margin-right: 48px;
    }
    .pagination-nav:last-child {
      margin-left: 48px;
    }
  }
</style>

<section id="{{ section.id }}" class="max-md:px-5">
  {%- assign articles_per_page = 7 -%}

  <div class="tag-filter-container">
    <!-- Mobile select dropdown -->
    <select id="tag-filter-select">
      <option value="">View all</option>
      {%- assign all_tags = '' -%}
      {%- for article in blog.articles -%}
        {%- for tag in article.tags -%}
          {%- assign tag_lc = tag | downcase -%}
          {%- unless all_tags contains tag_lc -%}
            <option value="{{ tag_lc | escape }}">{{ tag }}</option>
            {%- assign all_tags = all_tags | append: ',' | append: tag_lc -%}
          {%- endunless -%}
        {%- endfor -%}
      {%- endfor -%}
    </select>

    <!-- Desktop buttons -->
    <div id="tag-filter-buttons">
      <button class="filter-btn active" data-tag="">View All</button>
      {%- assign all_tags = '' -%}
      {%- for article in blog.articles -%}
        {%- for tag in article.tags -%}
          {%- assign tag_lc = tag | downcase -%}
          {%- unless all_tags contains tag_lc -%}
            <button class="filter-btn" data-tag="{{ tag_lc | escape }}">{{ tag }}</button>
            {%- assign all_tags = all_tags | append: ',' | append: tag_lc -%}
          {%- endunless -%}
        {%- endfor -%}
      {%- endfor -%}
    </div>
  </div>

  <ul id="article-source" style="display:none">
    {%- for article in blog.articles -%}
      {%- assign excerpt_text = article.excerpt | strip_html | strip_newlines -%}
      {%- if excerpt_text == '' -%}
        {%- assign excerpt_text = article.content | strip_html | strip_newlines -%}
      {%- endif -%}
      <li
        class="article-item"
        data-tags="{{ article.tags | join: ',' | downcase }}"
        data-url="{{ article.url }}"
        data-title="{{ article.title | escape }}"
        data-image="{{ article.image | image_url: width: 600 }}"

        data-tags-display="{%- for tag in article.tags -%}{{ tag }}{%- unless forloop.last %}, {% endunless -%}{%- endfor -%}"
        data-date="{{ article.published_at | date: '%b %d, %Y' }}"
        data-excerpt="{{ excerpt_text | truncate: 120 | escape }}"
      ></li>
    {%- endfor -%}
  </ul>

  <div class="!space-y-[55px] max-w-[1236px] mx-auto ">
    <ul id="top-grid" class="grid gap-10 md:!gap-8 md:grid-cols-2 max-md:!mt-10 md:!p-2.5"></ul>
    <ul id="bottom-grid" class="grid gap-10 md:gap-8 md:grid-cols-3"></ul>
  </div>

  <div id="pagination" aria-label="Pagination"></div>
  <div id="no-articles" style="display:none"><p>No articles found for the selected filter.</p></div>
</section>

<script>
  (() => {
    const perPage = {{ articles_per_page }};
    const allItems = Array.from(document.querySelectorAll('#article-source .article-item'));
    const pagination = document.getElementById('pagination');
    const filterButtons = document.querySelectorAll('.filter-btn');
    const filterSelect = document.getElementById('tag-filter-select');
    const noArticlesMsg = document.getElementById('no-articles');
    const topGrid = document.getElementById('top-grid');
    const bottomGrid = document.getElementById('bottom-grid');

    let filteredItems = [...allItems];
    let currentPage = 1;
    let totalPages = 1;

    const clearGrids = () => { topGrid.innerHTML = ''; bottomGrid.innerHTML = ''; };

    const createArticleCard = (item, index) => {
      const card = document.createElement('a');
      card.href = item.dataset.url;
      card.className = 'article-card';

      if (index === 0) card.classList.add('as-featured');
      else if (index >= 1 && index <= 3) card.classList.add('as-right');

      const imageHtml = item.dataset.image && item.dataset.image !== ''
        ? `<img src="${item.dataset.image}" alt="${item.dataset.title}" class="article-image">`
        : `<div class="article-image"></div>`;

      const dateHtml = item.dataset.date
        ? `<div class="article-date" >${item.dataset.date}</div>`
        : '';

      const excerptHtml = item.dataset.excerpt
        ? `<div class="article-excerpt">${item.dataset.excerpt}</div>`
        : '';

      const tagsHtml = item.dataset.tagsDisplay
  ? `<div class="article-tags">${
      item.dataset.tagsDisplay
        .split(',')
        .map(tag => {
          const safeTag = tag.trim().toLowerCase().replace(/\s+/g, '-');
          return `<span class="tag-badge tag-${safeTag}">${tag.trim()}</span>`;
        })
        .join(' ')
    }</div>`
  : '';

        const arrowSvg = `
        <svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M7.66699 17L17.667 7M17.667 7H7.66699M17.667 7V17" stroke="#292524" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>

      `;

      card.innerHTML = `
        ${imageHtml}
        <div class="article-content">
          ${dateHtml}
          <div class="article-title-row">
            <h3 class="article-title">${item.dataset.title}</h3>
            <span class="arrow-icon">${arrowSvg}</span>
          </div>
          ${excerptHtml}
          ${tagsHtml}
        </div>
      `;

      return card;
    };

    const reorderForLayout = (list) => {
      clearGrids();
      list.forEach((item, i) => {
        const card = createArticleCard(item, i);
        if (i === 0) { topGrid.appendChild(card); }
        else if (i >= 1 && i <= 3) { topGrid.appendChild(card); }
        else if (i >= 4 && i <= 6) { bottomGrid.appendChild(card); }
      });
    };



    const renderPagination = () => {
      totalPages = Math.ceil(filteredItems.length / perPage);
      pagination.innerHTML = '';

      if (totalPages <= 1) {
        pagination.style.display = 'none';
        return;
      }

      pagination.style.display = 'flex';

      // Prev button
      const prevBtn = document.createElement('button');
      prevBtn.className = `pagination-nav ${currentPage === 1 ? 'disabled' : ''}`;
      prevBtn.setAttribute('aria-label', 'Previous page');
      prevBtn.innerHTML = `
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none"         xmlns="http://www.w3.org/2000/svg">
        <path d="M19 12H5M5 12L12 5M5 12L12 19" stroke="#EA5167" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      `;
      prevBtn.addEventListener('click', () => {
        if (currentPage > 1) showPage(currentPage - 1);
      });
      pagination.appendChild(prevBtn);

      // Mobile page indicator (Page X of Y)
      const mobileIndicator = document.createElement('div');
      mobileIndicator.className = 'mobile-page-indicator';
      mobileIndicator.textContent = `Page ${currentPage} of ${totalPages}`;
      pagination.appendChild(mobileIndicator);

      // Page numbers (desktop only)
      const renderPageNumbers = () => {
        let startPage = 1;
        let endPage = totalPages;
        const maxVisiblePages = 5;

        // If total pages > max visible, calculate which ones to show
        if (totalPages > maxVisiblePages) {
          // Always show current page and some neighbors
          const pageNeighbors = Math.floor((maxVisiblePages - 1) / 2);
          startPage = Math.max(1, currentPage - pageNeighbors);
          endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

          // Adjust if we're near the end
          if (endPage - startPage + 1 < maxVisiblePages) {
            startPage = Math.max(1, endPage - maxVisiblePages + 1);
          }
        }

        // First page + ellipsis
        if (startPage > 1) {
          const firstPageBtn = createPageButton(1);
          pagination.appendChild(firstPageBtn);

          if (startPage > 2) {
            const ellipsis = document.createElement('span');
            ellipsis.className = 'pagination-ellipsis';
            ellipsis.textContent = '...';
            pagination.appendChild(ellipsis);
          }
        }

        // Visible page numbers
        for (let i = startPage; i <= endPage; i++) {
          const pageBtn = createPageButton(i);
          pagination.appendChild(pageBtn);
        }

        // Ellipsis + last page
        if (endPage < totalPages) {
          if (endPage < totalPages - 1) {
            const ellipsis = document.createElement('span');
            ellipsis.className = 'pagination-ellipsis';
            ellipsis.textContent = '...';
            pagination.appendChild(ellipsis);
          }

          const lastPageBtn = createPageButton(totalPages);
          pagination.appendChild(lastPageBtn);
        }
      };

      // Helper to create page number buttons
      const createPageButton = (pageNum) => {
        const pageBtn = document.createElement('button');
        pageBtn.className = `pagination-btn page-numbers ${pageNum === currentPage ? 'active' : ''}`;
        pageBtn.textContent = pageNum;
        pageBtn.setAttribute('aria-label', `Page ${pageNum}`);
        pageBtn.addEventListener('click', () => showPage(pageNum));
        return pageBtn;
      };

      renderPageNumbers();

      // Next button
      const nextBtn = document.createElement('button');
      nextBtn.className = `pagination-nav ${currentPage === totalPages ? 'disabled' : ''}`;
      nextBtn.setAttribute('aria-label', 'Next page');
      nextBtn.innerHTML = `
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M5 12H19M19 12L12 5M19 12L12 19" stroke="#EA5167" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      `;
      nextBtn.addEventListener('click', () => {
        if (currentPage < totalPages) showPage(currentPage + 1);
      });
      pagination.appendChild(nextBtn);
    };

    const showPage = (page) => {
      currentPage = Math.min(Math.max(1, page), totalPages);
      const start = (currentPage - 1) * perPage;
      const pageItems = filteredItems.slice(start, start + perPage);
      reorderForLayout(pageItems);
      renderPagination();
    };

    const filterArticles = (tag) => {
      filteredItems = tag
        ? allItems.filter((el) => el.dataset.tags.split(',').map(t => t.trim()).includes(tag))
        : [...allItems];

      if (!filteredItems.length) {
        clearGrids();
        pagination.innerHTML = '';
        noArticlesMsg.style.display = 'block';
        return;
      }

      noArticlesMsg.style.display = 'none';
      totalPages = Math.ceil(filteredItems.length / perPage);
      showPage(1);
    };

    const updateActiveButton = (btn) => {
      filterButtons.forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
    };

    const updateSelectValue = (tag) => {
      filterSelect.value = tag;
    };

    const handleFilter = (tag) => {
      filterArticles(tag);

      const activeBtn = document.querySelector(`[data-tag="${tag}"]`);
      if (activeBtn) updateActiveButton(activeBtn);
      updateSelectValue(tag);
    };

    // Button event listeners
    filterButtons.forEach((btn) => {
      btn.addEventListener('click', (e) => {
        e.preventDefault();
        const tag = btn.dataset.tag.toLowerCase().trim();
        handleFilter(tag);
      });
    });

    // Select event listener
    filterSelect.addEventListener('change', (e) => {
      const tag = e.target.value.toLowerCase().trim();
      handleFilter(tag);
    });

    filterArticles('');
  })();
</script>

{% schema %}
{
  "name": "Blogs Grid",
  "class": "blogs-grid",
  "settings": [],
  "presets": [{ "name": "Blogs Grid" }]
}
{% endschema %}
